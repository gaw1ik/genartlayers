{
    "params": "section2:{class:\"text\",value:\"Fractal Properties\"}\nnLevels:{class:\"number\", default:3, min:1, max:9, step:1}\nnPoints:{class:\"number\", default:5, min:1, max:12, step:1}\n\n\nsection3:{class:\"text\",value:\"Radial Properties\"}\nr0:{class:\"slider\", default:0.2, min:0.01, max:1, step:0.01}\nradRatio:{class:\"slider\", default:2, min:0.1, max:8, step:0.1}\n\n\nsection6:{class:\"text\",value:\"Defectivity/Error\"}\nseed:{class:\"number\", default:12, min:1, max:1000, step:1}\ngrowthDefectivity:{class:\"slider\", default:5, min:0, max:100, step:1}\nwarble:{class:\"slider\", default:0, min:0, max:1, step:0.001}\nthetaErrorD:{class:\"slider\", default:0, min:0, max:360, step:1}\nradiusError:{class:\"slider\", default:0, min:0, max:100, step:1}\n\n\nsection1:{class:\"text\", value:\"Location/Orientation\"}\nx0:{class:\"slider\", default:0.0, min:-1, max:1, step:0.01}\ny0:{class:\"slider\", default:0.0, min:-1, max:1, step:0.01}\nrotation:{class:\"slider\", default:0, min:0, max:360, step:1}\n\n\nsection4:{class:\"text\",value:\"Line Properties\"}\nlineWidth:{class:\"slider\", default:0.005, min:0.001, max:0.01, step:0.001}\n\n\nsection5:{class:\"text\",value:\"Color\"}\nhueCenter1:{class:\"slider-hue\", default:90, min:0, max:359, step:1}\nsatCenter1:{class:\"slider-sat\", default:30, min:0, max:100, step:1}\nlitCenter1:{class:\"slider-lit\", default:0,  min:0, max:100, step:1}\ncolorVary:{class:\"slider\", default:10, min:0, max:100, step:1}\n   \n\n\n",
    "drawFunction": "// constants\nvar alpha = 255;\nvar fillMode = 1;\n\n\n// convert some angles from degrees to radians\nvar thetar0 = deg2rad(rotation);\nvar thetaError = deg2rad(thetaErrorD);\n\n\n\n// initialize shapes array\nvar shapes = [];\n\nfor(let l=0; l<nLevels; l++) {\n  shapes.push([]);    \n}\n\nshapes[0].push( {x1:x0, y1:y0} ); \n\n\n// calculate and draw the fractal \nfor(let l=0; l<nLevels-1; l++) {\n\n  \n  // calculate the radius of this fractal level\n  var radius = r0/(radRatio**l);\n\n  \n  // for each fractal level\n  for(let i=0; i<shapes[l].length; i++) {\n    \n\n    // the location of the circle center for this level and this location\n    var cx = shapes[l][i].x1;\n    var cy = shapes[l][i].y1; \n    \n\n    // for each point on this fractal level\n    for (let j=0; j<nPoints; j++) {   \n\n      // this IF statement determines whether or not there is a growth defect in the fractal\n      if( makeChoice(100-growthDefectivity)==1 ) {\n\n        // location\n        var thetar = thetar0 - Math.PI/2 + getRandomFloat(-thetaError,thetaError);\n        var x1 = cx + radius * Math.cos(j * 2*Math.PI / nPoints + thetar);\n        var y1 = cy + radius * Math.sin(j * 2*Math.PI / nPoints + thetar);\n        var maxAmount = radius * warble;\n        x1 = plusOrMinus(x1, maxAmount);\n        y1 = plusOrMinus(y1, maxAmount);\n        \n        \n        // radii\n        var radiusPoint = vary(radius,radiusError)\n\n        \n        // color\n        var hue = hueCenter1;\n        var sat = vary(satCenter1, colorVary);\n        var lit = vary(litCenter1, colorVary);\n        \n        \n        // draw the circle\n        drawCircle(x1, y1, radiusPoint, lineWidth, hue, sat, lit, alpha, fillMode)\n        \n        \n        // push this set of points into the shapes array\n        shapes[l+1].push( {x1:x1,y1:y1} ); \n\n\n      }\n\n    }\n\n  }\n\n}\n\n\n\n"
}